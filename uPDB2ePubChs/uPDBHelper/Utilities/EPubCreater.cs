using Microsoft.IO;
using System;
using System.IO;
using System.IO.Compression;
using System.Text;

namespace uPDB2ePubChs
{
    internal static class EPubCreater
    {
        private static RecyclableMemoryStreamManager MSManager = new RecyclableMemoryStreamManager();

        private const String PathMimetype = @"mimetype";
        private const String PathContainer = @"META-INF\container.xml";
        private const String PathStyleSheet = @"OEBPS\Styles\stylesheel.css";
        private const String PathContent = @"OEBPS\content.opf";
        private const String PathToc = @"OEBPS\toc.ncx";

        //application/epub+zip
        private static readonly Byte[] AryMinetype =new Byte[] { 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x65, 0x70, 0x75, 0x62, 0x2B, 0x7A, 0x69, 0x70 };
        //<?xml version="1.0" encoding="UTF-8" ?><container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container"><rootfiles><rootfile full-path="OEBPS/content.opf" media-type="application/oebps-package+xml"/></rootfiles></container>
        private static readonly Byte[] AryContainer = new Byte[] { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x3F, 0x3E, 0x3C, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x75, 0x72, 0x6E, 0x3A, 0x6F, 0x61, 0x73, 0x69, 0x73, 0x3A, 0x6E, 0x61, 0x6D, 0x65, 0x73, 0x3A, 0x74, 0x63, 0x3A, 0x6F, 0x70, 0x65, 0x6E, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x22, 0x3E, 0x3C, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x3E, 0x3C, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x66, 0x75, 0x6C, 0x6C, 0x2D, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x22, 0x4F, 0x45, 0x42, 0x50, 0x53, 0x2F, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2E, 0x6F, 0x70, 0x66, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x6F, 0x65, 0x62, 0x70, 0x73, 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x3E, 0x3C, 0x2F, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x3E };
        //body{font-family:Helvetica,sans-serif;white-space: pre-wrap!important;word-wrap: break-word!important;}
        private static readonly Byte[] AryCSS = new Byte[] { 0x62, 0x6F, 0x64, 0x79, 0x7B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x3A, 0x48, 0x65, 0x6C, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2C, 0x73, 0x61, 0x6E, 0x73, 0x2D, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3B, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2D, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3A, 0x20, 0x70, 0x72, 0x65, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x77, 0x6F, 0x72, 0x64, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x3A, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6B, 0x2D, 0x77, 0x6F, 0x72, 0x64, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x7D };

        //<?xml version="1.0" encoding="UTF-8"?><package version="2.0" unique-identifier="BookId" xmlns="http://www.idpf.org/2007/opf"><metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf"><dc:language>zh-CN</dc:language><dc:identifier id="BookId">538f9dc8-2a5a-4b1c-a00c-3821aa7feff4</dc:identifier><dc:title>
        private static readonly Byte[] AryOPFA = new Byte[] { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x3F, 0x3E, 0x3C, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x32, 0x2E, 0x30, 0x22, 0x20, 0x75, 0x6E, 0x69, 0x71, 0x75, 0x65, 0x2D, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3D, 0x22, 0x42, 0x6F, 0x6F, 0x6B, 0x49, 0x64, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x69, 0x64, 0x70, 0x66, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x30, 0x37, 0x2F, 0x6F, 0x70, 0x66, 0x22, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x64, 0x63, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x70, 0x75, 0x72, 0x6C, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x63, 0x2F, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x31, 0x2E, 0x31, 0x2F, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x6F, 0x70, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x69, 0x64, 0x70, 0x66, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x30, 0x37, 0x2F, 0x6F, 0x70, 0x66, 0x22, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x6C, 0x61, 0x6E, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3E, 0x7A, 0x68, 0x2D, 0x43, 0x4E, 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x6C, 0x61, 0x6E, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x42, 0x6F, 0x6F, 0x6B, 0x49, 0x64, 0x22, 0x3E, 0x35, 0x33, 0x38, 0x66, 0x39, 0x64, 0x63, 0x38, 0x2D, 0x32, 0x61, 0x35, 0x61, 0x2D, 0x34, 0x62, 0x31, 0x63, 0x2D, 0x61, 0x30, 0x30, 0x63, 0x2D, 0x33, 0x38, 0x32, 0x31, 0x61, 0x61, 0x37, 0x66, 0x65, 0x66, 0x66, 0x34, 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        //</dc:title>
        private static readonly Byte[] AryOPFB = new Byte[] { 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        //<dc:creator opf:role="aut">
        private static readonly Byte[] AryOPFC = new Byte[] { 0x3C, 0x64, 0x63, 0x3A, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6F, 0x72, 0x20, 0x6F, 0x70, 0x66, 0x3A, 0x72, 0x6F, 0x6C, 0x65, 0x3D, 0x22, 0x61, 0x75, 0x74, 0x22, 0x3E };
        //</dc:creator>
        private static readonly Byte[] AryOPFD = new Byte[] { 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6F, 0x72, 0x3E };
        //</metadata><manifest><item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml"/><item id="stylesheel.css" href="Styles/stylesheel.css" media-type="text/css"/>
        private static readonly Byte[] AryOPFE = new Byte[] { 0x3C, 0x2F, 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3E, 0x3C, 0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x3E, 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x6E, 0x63, 0x78, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x74, 0x6F, 0x63, 0x2E, 0x6E, 0x63, 0x78, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x2D, 0x64, 0x74, 0x62, 0x6E, 0x63, 0x78, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x22, 0x2F, 0x3E };
        //</manifest><spine toc="ncx">
        private static readonly Byte[] AryOPFF = new Byte[] { 0x3C, 0x2F, 0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x3E, 0x3C, 0x73, 0x70, 0x69, 0x6E, 0x65, 0x20, 0x74, 0x6F, 0x63, 0x3D, 0x22, 0x6E, 0x63, 0x78, 0x22, 0x3E };
        //</spine></package>
        private static readonly Byte[] AryOPFG = new Byte[] { 0x3C, 0x2F, 0x73, 0x70, 0x69, 0x6E, 0x65, 0x3E, 0x3C, 0x2F, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x3E };
        //<item id="Section
        private static readonly Byte[] AryOPFZ1 = new Byte[] { 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E };
        //.xhtml" href="Text/Section
        private static readonly Byte[] AryOPFZ2 = new Byte[] { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x54, 0x65, 0x78, 0x74, 0x2F, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E };
        //.xhtml" media-type="application/xhtml+xml"/>
        private static readonly Byte[] AryOPFZ3 = new Byte[] { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E };
        //<itemref idref="Section
        private static readonly Byte[] AryOPFZ4 = new Byte[] { 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x72, 0x65, 0x66, 0x20, 0x69, 0x64, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E };
        //.xhtml"/>
        private static readonly Byte[] AryOPFZ5 = new Byte[] { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x2F, 0x3E };

        //<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE ncx PUBLIC "-//NISO//DTD ncx 2005-1//EN" "http://www.daisy.org/z3986/2005/ncx-2005-1.dtd"><ncx version="2005-1" xmlns="http://www.daisy.org/z3986/2005/ncx/"><head><meta name="dtb:depth" content="1"/></head><docTitle><text>
        private static readonly Byte[] AryNCXA = new Byte[] { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x3F, 0x3E, 0x3C, 0x21, 0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x6E, 0x63, 0x78, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x22, 0x2D, 0x2F, 0x2F, 0x4E, 0x49, 0x53, 0x4F, 0x2F, 0x2F, 0x44, 0x54, 0x44, 0x20, 0x6E, 0x63, 0x78, 0x20, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x2F, 0x2F, 0x45, 0x4E, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x61, 0x69, 0x73, 0x79, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x7A, 0x33, 0x39, 0x38, 0x36, 0x2F, 0x32, 0x30, 0x30, 0x35, 0x2F, 0x6E, 0x63, 0x78, 0x2D, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x2E, 0x64, 0x74, 0x64, 0x22, 0x3E, 0x3C, 0x6E, 0x63, 0x78, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x61, 0x69, 0x73, 0x79, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x7A, 0x33, 0x39, 0x38, 0x36, 0x2F, 0x32, 0x30, 0x30, 0x35, 0x2F, 0x6E, 0x63, 0x78, 0x2F, 0x22, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x64, 0x74, 0x62, 0x3A, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x31, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x64, 0x6F, 0x63, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        //</text></docTitle>
        private static readonly Byte[] AryNCXB = new Byte[] { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x64, 0x6F, 0x63, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        //<docAuthor><text>
        private static readonly Byte[] AryNCXC = new Byte[] { 0x3C, 0x64, 0x6F, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        //</text></docAuthor><navMap>
        private static readonly Byte[] AryNCXD = new Byte[] { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x64, 0x6F, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x3C, 0x6E, 0x61, 0x76, 0x4D, 0x61, 0x70, 0x3E };
        //</navMap></ncx>
        private static readonly Byte[] AryNCXE = new Byte[] { 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x4D, 0x61, 0x70, 0x3E, 0x3C, 0x2F, 0x6E, 0x63, 0x78, 0x3E };
        //<navPoint id="MyID-
        private static readonly Byte[] AryNCXZ1 = new Byte[] { 0x3C, 0x6E, 0x61, 0x76, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x4D, 0x79, 0x49, 0x44, 0x2D };
        //" playOrder="
        private static readonly Byte[] AryNCXZ2 = new Byte[] { 0x22, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x4F, 0x72, 0x64, 0x65, 0x72, 0x3D, 0x22 };
        //"><navLabel><text>
        private static readonly Byte[] AryNCXZ3 = new Byte[] { 0x22, 0x3E, 0x3C, 0x6E, 0x61, 0x76, 0x4C, 0x61, 0x62, 0x65, 0x6C, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        //</text></navLabel><content src="Text/Section
        private static readonly Byte[] AryNCXZ4 = new Byte[] { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x4C, 0x61, 0x62, 0x65, 0x6C, 0x3E, 0x3C, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3D, 0x22, 0x54, 0x65, 0x78, 0x74, 0x2F, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E };
        //.xhtml"/></navPoint>
        private static readonly Byte[] AryNCXZ5 = new Byte[] { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x3E };


        //<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>
        private static readonly Byte[] AryHtmlA = new Byte[] { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x3F, 0x3E, 0x3C, 0x21, 0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x22, 0x2D, 0x2F, 0x2F, 0x57, 0x33, 0x43, 0x2F, 0x2F, 0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4D, 0x4C, 0x20, 0x31, 0x2E, 0x31, 0x2F, 0x2F, 0x45, 0x4E, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x77, 0x33, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x54, 0x52, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x31, 0x31, 0x2F, 0x44, 0x54, 0x44, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x31, 0x31, 0x2E, 0x64, 0x74, 0x64, 0x22, 0x3E, 0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x77, 0x33, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x31, 0x39, 0x39, 0x39, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        //</title><link href="../Styles/stylesheel.css" rel="stylesheet" type="text/css"/></head><body><pre>
        private static readonly Byte[] AryHtmlB1 = new Byte[] { 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x2E, 0x2E, 0x2F, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6C, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x70, 0x72, 0x65, 0x3E };
        //</pre></body></html>
        private static readonly Byte[] AryHtmlB2 = new Byte[] { 0x3C, 0x2F, 0x70, 0x72, 0x65, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E };
        //</title><link href="../Styles/stylesheel.css" rel="stylesheet" type="text/css"/></head><body><div><div>
        private static readonly Byte[] AryHtmlC1 = new Byte[] { 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x2E, 0x2E, 0x2F, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6C, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x64, 0x69, 0x76, 0x3E };
        //</div></div></body></html>
        private static readonly Byte[] AryHtmlC2 = new Byte[] { 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E };
        //<br/></div><div>
        private static readonly Byte[] AryHtmlC3 = new Byte[] { 0x3C, 0x62, 0x72, 0x2F, 0x3E, 0x3C, 0x2F, 0x64, 0x69, 0x76, 0x3E, 0x3C, 0x64, 0x69, 0x76, 0x3E };

        public static void CreatEPub(UnicodePDB uPdb, String fileName, Boolean cleanMode )
        {

            using (var zip = ZipStorer.Create(fileName, String.Empty))
            {
                zip.EncodeUTF8 = true;

                using (MemoryStream StmMinetype=MSManager.GetStream(), StmContainer = MSManager.GetStream(), StmCSS = MSManager.GetStream())
                {
                    StmMinetype.Write(AryMinetype, 0, AryMinetype.Length);
                    StmContainer.Write(AryContainer, 0, AryContainer.Length);
                    StmCSS.Write(AryCSS, 0, AryCSS.Length);
                    StmMinetype.Seek(0, SeekOrigin.Begin);
                    StmContainer.Seek(0, SeekOrigin.Begin);
                    StmCSS.Seek(0, SeekOrigin.Begin);
                    zip.AddStream(ZipStorer.Compression.Store, PathMimetype, StmMinetype, DateTime.Now, String.Empty);  //minetype 文件
                    zip.AddStream(ZipStorer.Compression.Deflate, PathContainer, StmContainer, DateTime.Now, string.Empty); //META-INF\container.xml文件
                    zip.AddStream(ZipStorer.Compression.Deflate, PathStyleSheet, StmCSS, DateTime.Now, string.Empty); //样式表文件。
                }
                using (MemoryStream opf = MSManager.GetStream(), ncx = MSManager.GetStream()) //opf信息和ncx信息文件。
                {

                    var title = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, uPdb.InnerTitle);
                    opf.Write(AryOPFA, 0, AryOPFA.Length);
                    opf.Write(title, 0, title.Length);
                    opf.Write(AryOPFB, 0, AryOPFB.Length);
                    ncx.Write(AryNCXA, 0, AryNCXA.Length);
                    ncx.Write(title, 0, title.Length);
                    ncx.Write(AryNCXB, 0, AryNCXB.Length);
                    if (uPdb.Author != null)
                    {
                        var author = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, uPdb.InnerAuthor);
                        opf.Write(AryOPFC, 0, AryOPFC.Length);
                        opf.Write(author, 0, author.Length);
                        opf.Write(AryOPFD, 0, AryOPFD.Length);
                        ncx.Write(AryNCXC, 0, AryNCXC.Length);
                        ncx.Write(author, 0, author.Length);
                        ncx.Write(AryNCXD, 0, AryNCXD.Length);
                    }
                    opf.Write(AryOPFE, 0, AryOPFE.Length);
                    for (int i = 0; i < uPdb.Catalogue.Count; i++)
                    {
                        var iStr = Encoding.UTF8.GetBytes(i.ToString());
                        var iPPStr = Encoding.UTF8.GetBytes((i + 1).ToString());

                        opf.Write(AryOPFZ1, 0, AryOPFZ1.Length);
                        opf.Write(iStr, 0, iStr.Length);
                        opf.Write(AryOPFZ2, 0, AryOPFZ2.Length);
                        opf.Write(iStr, 0, iStr.Length);
                        opf.Write(AryOPFZ3, 0, AryOPFZ3.Length);

                        ncx.Write(AryNCXZ1, 0, AryNCXZ1.Length);
                        ncx.Write(iStr, 0, iStr.Length);
                        ncx.Write(AryNCXZ2, 0, AryNCXZ2.Length);
                        ncx.Write(iPPStr, 0, iPPStr.Length);
                        ncx.Write(AryNCXZ3, 0, AryNCXZ3.Length);
                        ncx.Write(uPdb.Catalogue[i].UTF8Name, 0, uPdb.Catalogue[i].UTF8Name.Length);
                        ncx.Write(AryNCXZ4, 0, AryNCXZ4.Length);
                        ncx.Write(iStr, 0, iStr.Length);
                        ncx.Write(AryNCXZ5, 0, AryNCXZ5.Length);
                    }
                    opf.Write(AryOPFF, 0, AryOPFF.Length); ;
                    ncx.Write(AryNCXE, 0, AryNCXE.Length);
                    for (int i = 0; i < uPdb.Catalogue.Count; i++)
                    {
                        var iStr = Encoding.UTF8.GetBytes(i.ToString());
                        opf.Write(AryOPFZ4, 0, AryOPFZ4.Length);
                        opf.Write(iStr, 0, iStr.Length);
                        opf.Write(AryOPFZ5, 0, AryOPFZ5.Length);

                        //下面写入每章的信息
                        using (var chapter= GetChapterStream(uPdb,i,cleanMode))
                        {
                            zip.AddStream(ZipStorer.Compression.Deflate, $@"OEBPS\Text\Section{i}.xhtml", chapter, DateTime.Now, string.Empty);
                        }
                     }
                    opf.Write(AryOPFG, 0, AryOPFG.Length);
                    opf.Seek(0, SeekOrigin.Begin);
                    ncx.Seek(0, SeekOrigin.Begin);
                    zip.AddStream(ZipStorer.Compression.Deflate, PathContent, opf, DateTime.Now, string.Empty);
                    zip.AddStream(ZipStorer.Compression.Deflate, PathToc, ncx, DateTime.Now, string.Empty);
                }

             }

        }

        private static MemoryStream GetChapterStream(UnicodePDB uPdb, Int32 index, Boolean cleanMode)
        {
            var textAry = Encoding.Convert(Encoding.Unicode, Encoding.UTF8, uPdb.GetChapter(index));
            var mem = MSManager.GetStream();
            mem.Write(AryHtmlA, 0, AryHtmlA.Length);
            mem.Write(uPdb.Catalogue[index].UTF8Name, 0, uPdb.Catalogue[index].UTF8Name.Length);
            if (cleanMode)
            {
                mem.Write(AryHtmlB1, 0, AryHtmlB1.Length);
                mem.Write(textAry, 0, textAry.Length);
                mem.Write(AryHtmlB2, 0, AryHtmlB2.Length);
            }
            else
            {
                mem.Write(AryHtmlC1, 0, AryHtmlC1.Length);
                //用div和br填充。
                for (int i = 0; i < textAry.Length; i++)
                {
                    if (textAry[i] == 0x0D && textAry[i + 1] == 0x0A)
                    {
                        ++i;
                        mem.Write(AryHtmlC3, 0, AryHtmlC3.Length);
                    }
                    else
                    {
                        mem.WriteByte(textAry[i]);
                    }
                }

                mem.Write(AryHtmlC2, 0, AryHtmlC2.Length);
            }
            mem.Seek(0, SeekOrigin.Begin);
            return mem;
        }


    }
}
